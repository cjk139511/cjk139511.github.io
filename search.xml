<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>python中字符串操作以及相关</title>
    <url>/2019/12/04/python%E4%B8%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<p>一:什么是字符串</p>
<p>​        很多人初学编程时，总是担心自己数学不行，潜意识里认为数学好才能编程。实际上，大多数程序员打交道最多的是“字符串”而不是“数字”。因为，编程是用来解决现实问题的，因此逻辑思维的重要性远远超过数学能力。 字符串的本质是:字符序列。Python的字符串是不可变的，我们无法对原字符串做任何修改。但可以将字符串的一部分复制到新创建的字符串，达到“看起来修改”的效果。 Python不支持单字符类型，单字符也是作为一个字符串使用的。 </p>
<p>二:字符串的创建</p>
<p>1.我们可以通过单引号或双引号创建字符串。例如:a=’abc’; b=”cjk” 使用两种引号的好处是可以创建本身就包含引号的字符串，而不用使用转义字符。例如: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过双引号创建字符串</span></span><br><span class="line">a = <span class="string">"I'm a teacher!"</span></span><br><span class="line">print(a) <span class="comment"># I'm a teacher!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过单引号创建字符串</span></span><br><span class="line">b = <span class="string">'my_name is "TOM"'</span></span><br><span class="line">print(b) <span class="comment"># my_name is "TOM"</span></span><br></pre></td></tr></table></figure>

<p>2.连续三个单引号或三个双引号，可以帮助我们创建多行字符串。例如: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">resume = <span class="string">''' name="gaoqi"</span></span><br><span class="line"><span class="string">company="sxt" age=18</span></span><br><span class="line"><span class="string">lover="Tom"'''</span></span><br><span class="line">print(resume)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">name=<span class="string">"gaoqi"</span></span><br><span class="line">company=<span class="string">"sxt"</span> age=<span class="number">18</span></span><br><span class="line">lover=<span class="string">"Tom"</span></span><br></pre></td></tr></table></figure>

<p>3.空字符串</p>
<p>Python 允许空字符串的存在，不包含任何字符且长度为 0。例如: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="string">''</span></span><br><span class="line">print(len(c)) <span class="comment"># 0</span></span><br></pre></td></tr></table></figure>

<p>三:字符串中的相关操作</p>
<p>1.字符串的拼接</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以使用+将多个字符串拼接起来</span></span><br><span class="line">a = <span class="string">'a'</span> + <span class="string">'b'</span></span><br><span class="line">print(a) <span class="comment"># ab</span></span><br><span class="line"><span class="comment"># 注意:(1)如果+两边都是字符串，则拼接。(2)如果+两边都是数字，则加法运算。(3)如果+两边类型不同，则抛出异常。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以将多个字面字符串直接放到一起实现拼接</span></span><br><span class="line">a = <span class="string">'a'</span><span class="string">'b'</span></span><br><span class="line">print(a) <span class="comment"># ab</span></span><br><span class="line"><span class="comment"># 注意:一般不使用这种用法，可读性较差</span></span><br></pre></td></tr></table></figure>

<p>2.字符串的复制</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">'cjk'</span> * <span class="number">3</span></span><br><span class="line">print(a) <span class="comment"># cjkcjkcjk</span></span><br><span class="line"><span class="comment"># 字符串的复制就是将多个字符串拼接到一起,复制的规则:只能是字符串和数字相乘</span></span><br></pre></td></tr></table></figure>

<p>3.从控制台读取字符串 </p>
<p>我们可以使用 input()从控制台读取键盘输入的内容 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">myname = input(<span class="string">"请输入名字:"</span>)</span><br><span class="line"></span><br><span class="line">print(myname)</span><br></pre></td></tr></table></figure>

<p>4.str()实现数字转字符串 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str(5.20) ==&gt; ‘5.20’ str(3.14e2)==&gt;’314.0’ str(True) ==&gt; ‘True’</span><br><span class="line"><span class="comment"># 注意:当我们调用 print()函数时，解释器自动调用了 str()将非字符串的对象转成了字符串</span></span><br></pre></td></tr></table></figure>

<p>5.replace()实现字符串替换 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">'abcdefghijklmnopqrstuvwxyz'</span></span><br><span class="line">a = a.replace(<span class="string">'c'</span>, <span class="string">'陈'</span>)</span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># ab陈defghijklmnopqrstuvwxyz</span></span><br><span class="line"><span class="comment"># 注意:整个过程中，实际上我们是创建了新的字符串对象，并指向了变量 a，而不是修改了以前的字符串</span></span><br></pre></td></tr></table></figure>

<p>6.字符串切片 slice 操作 </p>
<p>切片 slice 操作可以让我们快速的提取子字符串。标准格式为: </p>
<p>[起始偏移量 start:终止偏移量 end:步长 step] </p>
<table>
<thead>
<tr>
<th>操作和说明</th>
<th>示例</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>[:] 提取整个字符串</td>
<td>“abcdef”[:]</td>
<td>”abcdef”</td>
</tr>
<tr>
<td>[start:]从 start 索引开始到结尾</td>
<td>“abcdef”[2:]</td>
<td>“cdef”</td>
</tr>
<tr>
<td>[:end]从头开始知道 end-1</td>
<td>“abcdef”[:2]</td>
<td>“ab”</td>
</tr>
<tr>
<td>[start:end]从 start 到 end-1</td>
<td>“abcdef”[2:4]</td>
<td>“cd”</td>
</tr>
<tr>
<td>[start: end:step]从 start 提取到 end-1，步长是 step</td>
<td>“abcdef”[1:5:2]</td>
<td>“bd”</td>
</tr>
<tr>
<td>倒数三个</td>
<td>“abcdefghijklmnopqrstuv wxyz”[-3:]</td>
<td>“xyz”</td>
</tr>
<tr>
<td>倒数第八个到倒数第 三个(包头不包尾)</td>
<td>“abcdefghijklmnopqrstuv wxyz”[-8:-3]</td>
<td>‘stuvw’</td>
</tr>
<tr>
<td>步长为负，从右到左 反向提取</td>
<td>“abcdefghijklmnopqrstuv wxyz”[::-1]</td>
<td>‘zyxwvutsrqpon mlkjihgfedcba’</td>
</tr>
</tbody></table>
<p>注意:切片操作时，起始偏移量和终止偏移量不在[0,字符串长度-1]这个范围，也不会报错。起始偏移量小于0则会当做 0，终止偏移量大于“长度-1”会被当成-1。</p>
<p>(7).split()分割和 join()合并 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># split()可以基于指定分隔符将字符串分隔成多个子字符串(存储到列表中)。如果不指定分隔符，则默认使用空白字符(换行符/空格/制表符)</span></span><br><span class="line">a = <span class="string">"to be or not to be"</span></span><br><span class="line">b = a.split()</span><br><span class="line">print(b)</span><br><span class="line"><span class="comment"># ['to', 'be', 'or', 'not', 'to', 'be']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># join()的作用和split()作用刚好相反，用于将一系列子字符串连接起来</span></span><br><span class="line">a = [<span class="string">'cjk'</span>,<span class="string">'cjk100'</span>,<span class="string">'cjk200'</span>]</span><br><span class="line">b = <span class="string">'*'</span>.join(a)</span><br><span class="line">print(b)</span><br><span class="line"><span class="comment"># 'cjk*cjk100*cjk200'</span></span><br></pre></td></tr></table></figure>

<p>拼接字符串要点: 使用字符串拼接符+，会生成新的字符串对象，因此不推荐使用+来拼接字符串。推荐使用 join 函数，因为 join 函数在拼接字符串之前会计算所有字符串的长度，然后逐一拷贝， 仅新建一次对象。 </p>
<p>(8).字符串比较和同一性 </p>
<p>我们可以直接使用==,!=对字符串进行比较，是否含有相同的字符。我们使用 is / not is，判断两个对象是否同一个对象。比较的是对象的地址，即 id(obj1)是否和 id(obj2)相等。 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在Python中，id是什么？id是内存地址，比如你利用id()内置函数去查询一个数据的内存地址：</span><br><span class="line">name = ‘meet’</span><br><span class="line">s_id = id(name) <span class="comment"># 通过内置方法获取name变量对应的值在内存中的编号</span></span><br><span class="line">print(s_id) <span class="comment"># 2055782908568 这就是name在内存中的编号</span></span><br><span class="line">那么 <span class="keyword">is</span> 是什么？ == 又是什么？</span><br><span class="line"></span><br><span class="line">== 是比较的两边的数值是否相等，而 <span class="keyword">is</span> 是比较的两边的内存地址是否相等。 如果内存地址相等，那么这两边其实是指向同一个内存地址。</span><br></pre></td></tr></table></figure>

<p>(9).成员操作符 </p>
<p>in /not in 关键字，判断某个字符(子字符串)是否存在于字符串中 。</p>
<p>(10).字符串方法大全</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全部大写</span></span><br><span class="line">name = <span class="string">'junkan'</span></span><br><span class="line">new_name = name.upper()</span><br><span class="line">print(new_name)</span><br><span class="line"><span class="comment"># 把这个字符串全部变成大写</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 全部小写</span></span><br><span class="line">name = <span class="string">'JUNKAN'</span></span><br><span class="line">new_name = name.lower()</span><br><span class="line">print(new_name)</span><br><span class="line"><span class="comment"># 把这个字符串全部变成小写</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首字母大写</span></span><br><span class="line">name = <span class="string">'junkandasx'</span></span><br><span class="line">new_name = name.capitalize()</span><br><span class="line">print(new_name)</span><br><span class="line"><span class="comment"># 首字母大写</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 大小写转换</span></span><br><span class="line">name = <span class="string">'junkandasx'</span></span><br><span class="line">new_name = name.swapcase()</span><br><span class="line">print(new_name)</span><br><span class="line"><span class="comment"># 字符串大小写转换</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以什么开头</span></span><br><span class="line">name = <span class="string">'junkan'</span></span><br><span class="line">new_name = name.startswith(<span class="string">'j'</span>)</span><br><span class="line"><span class="keyword">if</span> new_name:</span><br><span class="line">    print(<span class="string">'是以j开头'</span>)</span><br><span class="line"><span class="comment"># 判断这是不是字符串是不是以j开头的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以什么结尾</span></span><br><span class="line">name = <span class="string">'junkan'</span></span><br><span class="line">new_name = name.endswith(<span class="string">'n'</span>)</span><br><span class="line"><span class="keyword">if</span> new_name:</span><br><span class="line">    print(<span class="string">'是以n结尾'</span>)</span><br><span class="line"><span class="comment"># 判断这是不是字符串是不是以n结尾的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计出现的次数</span></span><br><span class="line">name = <span class="string">'junkan'</span></span><br><span class="line">new_name = name.count(<span class="string">'n'</span>)</span><br><span class="line">print(new_name)</span><br><span class="line"><span class="comment"># 统计name这个字符串中n出现的次数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找下标</span></span><br><span class="line">name = <span class="string">'junkan'</span></span><br><span class="line">new_name = name.find(<span class="string">'u'</span>)</span><br><span class="line">print(new_name)</span><br><span class="line"><span class="comment"># 通过元素查找下标,不存在就返回-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 去除头尾两边的空格</span></span><br><span class="line">name = <span class="string">' junkan '</span></span><br><span class="line">new_name = name.strip()</span><br><span class="line">print(new_name)</span><br><span class="line"><span class="comment"># 去除头尾俩遍的空格和换行符</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串格式化</span></span><br><span class="line">name = <span class="string">'junkan&#123;&#125;'</span></span><br><span class="line">new_name = name.format(<span class="string">'说的对'</span>)</span><br><span class="line">print(new_name)</span><br><span class="line"><span class="comment"># 字符串格式化</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是不是阿拉伯数字,返回的是布尔值</span></span><br><span class="line">name = <span class="string">'junkan'</span></span><br><span class="line">new_name = name.isdigit()</span><br><span class="line">print(new_name)</span><br><span class="line"><span class="comment"># 判断是不是阿拉伯数字,</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是不是数字和字母,返回的是布尔值</span></span><br><span class="line">name = <span class="string">'junkan7dasx'</span></span><br><span class="line">new_name = name.isalnum()</span><br><span class="line">print(new_name)</span><br><span class="line"><span class="comment"># 判断是不是字母和数字,返回结果是布尔值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是不是纯字母和汉字,返回的是布尔值</span></span><br><span class="line">name = <span class="string">'junkandasx'</span></span><br><span class="line">new_name = name.isalpha()</span><br><span class="line">print(new_name)</span><br><span class="line"><span class="comment"># 判断是不是纯字母和汉字,返回的是布尔值</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python教程</category>
      </categories>
      <tags>
        <tag>python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>python中字典操作以及相关</title>
    <url>/2019/12/04/python%E4%B8%AD%E5%AD%97%E5%85%B8%E6%93%8D%E4%BD%9C%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<p>一.什么是字典</p>
<p>​        字典是“键值对”的无序可变序列，字典中的每个元素都是一个“键值对”，包含:“键对象”和“值对象”。可以通过“键对象”实现快速获取、删除、更新对应的“值对象”。 列表中我们通过“下标数字”找到对应的对象。字典中通过“键对象”找到对应的“值对象”。“键”是任意的不可变数据(也就是我们所说的可hash的)，比如:整数、浮点数、字符串、元组。但是，列表、字典、集合这些可变对象(也就是我们所说的不可hash的)，不能作为“键”。并且“键”不可重复， “值”可以是任意的数据，并且可重复。</p>
<p>基本语法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">语法:&#123;<span class="string">'key1'</span>:<span class="number">1</span>,<span class="string">'key2'</span>:<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>

<p>注意: key必须是不可变(可哈希)的. value没有要求.可以保存任意类型的数据</p>
<p>一个典型的字典的定义方式:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">'name'</span>:<span class="string">'junkan'</span>,<span class="string">'age'</span>:<span class="number">18</span>,<span class="string">'job'</span>:<span class="string">'IT'</span>&#125;</span><br></pre></td></tr></table></figure>

<p>二:字典中的相关操作</p>
<p>1.字典的创建</p>
<p>(1).在python中我们可以通过{}，dict()来创建字典对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过赋值的形式创建一个字典</span></span><br><span class="line">a = &#123;<span class="string">'name'</span>: <span class="string">'junkan'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'job'</span>: <span class="string">'programmer'</span>&#125;</span><br><span class="line"><span class="comment"># 将列表中的元祖转换为字典</span></span><br><span class="line">b = dict([(<span class="string">"name"</span>, <span class="string">"junkan"</span>), (<span class="string">"age"</span>, <span class="number">18</span>)])</span><br><span class="line"><span class="comment"># 创建空的字典</span></span><br><span class="line">c = &#123;&#125;  <span class="comment"># 空的字典对象</span></span><br><span class="line">d = dict()  <span class="comment"># 空的字典对象</span></span><br><span class="line"></span><br><span class="line">print(a) <span class="comment"># &#123;'name': 'junkan', 'age': 18, 'job': 'programmer'&#125;</span></span><br><span class="line">print(b) <span class="comment"># &#123;'name': 'junkan', 'age': 18&#125;</span></span><br><span class="line">print(c) <span class="comment"># &#123;&#125;</span></span><br><span class="line">print(d) <span class="comment"># &#123;&#125;</span></span><br></pre></td></tr></table></figure>

<p>(2).通过 zip()创建字典对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">k = [<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'job'</span>]</span><br><span class="line">v = [<span class="string">'junkan'</span>, <span class="number">18</span>, <span class="string">'IT'</span>]</span><br><span class="line">d = dict(zip(k, v))</span><br><span class="line"></span><br><span class="line">print(d) <span class="comment"># &#123;'name': 'junkan', 'age': 18, 'job': 'IT'&#125;</span></span><br></pre></td></tr></table></figure>

<p>(3).通过 fromkeys 创建值为空的字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = dict.fromkeys([<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'job'</span>])</span><br><span class="line"></span><br><span class="line">print(a) <span class="comment"># &#123;'name': None, 'age': None, 'job': None&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典的坑:</span></span><br><span class="line">dic = &#123;&#125;</span><br><span class="line">dic1 = dic.fromkeys([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], [<span class="string">'你好'</span>])</span><br><span class="line">print(dic1)</span><br><span class="line"><span class="comment"># 结果  &#123;'a': ['你好'], 'b': ['你好'], 'c': ['你好']&#125;</span></span><br><span class="line"><span class="comment"># 注意:fromkeys里第一个参数是可迭代的对象,里边的每个元素就是字典中的健,第二个参数就是值现在创建的字典中后边的值用的是同一个</span></span><br><span class="line"></span><br><span class="line">dic1[<span class="string">'a'</span>].append(<span class="string">'我好'</span>)</span><br><span class="line">print(dic1)</span><br><span class="line"><span class="comment"># 结果 &#123;'a': ['你好', '我好'], 'b': ['你好', '我好'], 'c': ['你好', '我好']&#125;</span></span><br><span class="line"><span class="comment"># 注意:通过上述的内容我们发现这些值其实用的都是同一个东西,只有值是可变数据类型的时候才会出现坑,使用时请慎重</span></span><br></pre></td></tr></table></figure>

<p>2.字典中元素的常见访问形式</p>
<p>为了测试各种访问方法，我们这里设定一个字典对象: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">'name'</span>: <span class="string">'junkan'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'job'</span>: <span class="string">'programmer'</span>&#125;</span><br></pre></td></tr></table></figure>

<p>注意:dict保存的数据不是按照我们添加进去的顺序保存的，是按照hash表的顺序保存的，⽽hash表不是连续的， 所以不能进⾏切片⼯作. 它只能通过key来获取dict中的数据</p>
<p>(1).通过”键”获得“值”，若键不存在，则抛出异常 。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过"键"获得“值”</span></span><br><span class="line">a = &#123;<span class="string">'name'</span>: <span class="string">'junkan'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'job'</span>: <span class="string">'programmer'</span>&#125;</span><br><span class="line"></span><br><span class="line">print(a[<span class="string">'name'</span>]) <span class="comment"># junkan</span></span><br><span class="line">print(a[<span class="string">'age'</span>])  <span class="comment"># 18</span></span><br><span class="line">print(a[<span class="string">'job'</span>])  <span class="comment"># programmer</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过"键"获得“值”，键不存在，则抛出异常</span></span><br><span class="line">a = &#123;<span class="string">'name'</span>: <span class="string">'junkan'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'job'</span>: <span class="string">'programmer'</span>&#125;</span><br><span class="line"></span><br><span class="line">print(a[<span class="string">'junkan'</span>]) <span class="comment"># KeyError: 'junkan'</span></span><br></pre></td></tr></table></figure>

<p>(2).通过get()方法获得“值”，优点是:指定键不存在，返回None;也可以设定指定键不存在时默认返回的对象，不会出现报错的情况。推荐使用get()获取“值对象” </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定的键存在</span></span><br><span class="line">a = &#123;<span class="string">'name'</span>: <span class="string">'junkan'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'job'</span>: <span class="string">'programmer'</span>&#125;</span><br><span class="line"></span><br><span class="line">print(a.get(<span class="string">'name'</span>)) <span class="comment"># junkan</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定的键不存在时，指定默认的返回值</span></span><br><span class="line">a = &#123;<span class="string">'name'</span>: <span class="string">'junkan'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'job'</span>: <span class="string">'programmer'</span>&#125;</span><br><span class="line"></span><br><span class="line">print(a.get(<span class="string">'haha'</span>, <span class="string">'没有该key'</span>)) <span class="comment"># 没有该key</span></span><br></pre></td></tr></table></figure>

<p>(3).列出所有的键值对</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">'name'</span>: <span class="string">'junkan'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'job'</span>: <span class="string">'programmer'</span>&#125;</span><br><span class="line"><span class="comment"># 一个高仿列表,存放是多个元祖,元祖中第一个是字典中的键,第二个是字典中的值</span></span><br><span class="line"></span><br><span class="line">print(a.items())</span><br><span class="line"><span class="comment"># dict_items([('name', 'junkan'), ('age', 18), ('job', 'programmer')])</span></span><br></pre></td></tr></table></figure>

<p>(4).列出所有的键，列出所有的值 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">'name'</span>: <span class="string">'junkan'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'job'</span>: <span class="string">'programmer'</span>&#125;</span><br><span class="line"></span><br><span class="line">print(a.keys()) <span class="comment"># dict_keys(['name', 'age', 'job'])</span></span><br><span class="line"><span class="comment"># 一个高仿列表,存放的都是字典中的key</span></span><br><span class="line"></span><br><span class="line">print(a.values()) <span class="comment"># dict_values(['junkan', 18, 'programmer'])</span></span><br><span class="line"><span class="comment"># 一个高仿列表,存放都是字典中的value</span></span><br></pre></td></tr></table></figure>

<p>(5).len()方法统计键值对的个数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">'name'</span>: <span class="string">'junkan'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'job'</span>: <span class="string">'programmer'</span>&#125;</span><br><span class="line"></span><br><span class="line">print(len(a)) <span class="comment"># 3</span></span><br></pre></td></tr></table></figure>

<p>(6).检测一个“键”是否在字典中 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">'name'</span>: <span class="string">'junkan'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'job'</span>: <span class="string">'programmer'</span>&#125;</span><br><span class="line"></span><br><span class="line">print(<span class="string">"name"</span> <span class="keyword">in</span> a) <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<p>3.字典元素的添加，修改，删除</p>
<p>(1).给字典新增“键值对”，如果“键”已经存在，则覆盖旧的键值对;如果“键”不存在，则新增“键值对” </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 键不存在，新增</span></span><br><span class="line">a = &#123;<span class="string">'name'</span>: <span class="string">'junkan'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'job'</span>: <span class="string">'programmer'</span>&#125;</span><br><span class="line"></span><br><span class="line">a[<span class="string">'address'</span>] = <span class="string">'hangzhou'</span></span><br><span class="line"></span><br><span class="line">print(a) <span class="comment"># &#123;'name': 'junkan', 'age': 18, 'job': 'programmer', 'address': 'hangzhou'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 键存在，新值覆盖旧的值</span></span><br><span class="line">a = &#123;<span class="string">'name'</span>: <span class="string">'junkan'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'job'</span>: <span class="string">'programmer'</span>&#125;</span><br><span class="line"></span><br><span class="line">a[<span class="string">'name'</span>] = <span class="string">'hangzhou'</span></span><br><span class="line"></span><br><span class="line">print(a) <span class="comment"># &#123;'name': 'hangzhou', 'age': 18, 'job': 'programmer'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果dict中没有出现过这个key-value. 可以通过setdefault设置默认值</span></span><br><span class="line">dic = &#123;&#125;</span><br><span class="line">s1 = dic.setdefault(<span class="string">'junkan'</span>)</span><br><span class="line">print(s1) <span class="comment"># None</span></span><br><span class="line">print(dic) <span class="comment"># 返回的是添加进去的值:&#123;'junkan': None&#125;， </span></span><br><span class="line"><span class="comment"># 总结: 当setdefault中第一个参数存在这个字典中就就不进行添加操作,否则就添加</span></span><br></pre></td></tr></table></figure>

<p>(2).可以使用update()将新字典中所有键值对全部添加到旧字典对象上。如果 key 有重复，则直接覆盖 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">'name'</span>: <span class="string">'junkan'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'job'</span>: <span class="string">'programmer'</span>&#125;</span><br><span class="line">b = &#123;<span class="string">'name'</span>: <span class="string">'hangzhou'</span>, <span class="string">'money'</span>: <span class="number">1000</span>, <span class="string">'sex'</span>: <span class="string">'男的'</span>&#125;</span><br><span class="line">a.update(b)</span><br><span class="line">print(a) </span><br><span class="line"><span class="comment"># &#123;'name': 'hangzhou', 'age': 18, 'job': 'programmer', 'money': 1000, 'sex': '男的'&#125;</span></span><br><span class="line"><span class="comment"># 注意:当update中的字典里没有dic中键值对就添加到dic字典中,如果有就修改里边的对应的值</span></span><br></pre></td></tr></table></figure>

<p>(3).字典中元素的删除，可以使用del方法，或者clear()删除所有键值对；pop()删除指定键值对，并返回对应的“值对象” </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># del删除元素</span></span><br><span class="line">a = &#123;<span class="string">'name'</span>: <span class="string">'junkan'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'job'</span>: <span class="string">'programmer'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> a[<span class="string">'name'</span>]</span><br><span class="line"></span><br><span class="line">print(a) <span class="comment"># &#123;'age': 18, 'job': 'programmer'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># clear()清空所有元素</span></span><br><span class="line">a = &#123;<span class="string">'name'</span>: <span class="string">'junkan'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'job'</span>: <span class="string">'programmer'</span>&#125;</span><br><span class="line"></span><br><span class="line">a.clear()</span><br><span class="line"></span><br><span class="line">print(a) <span class="comment"># &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pop删除有返回值,返回的是被删的值</span></span><br><span class="line">a = &#123;<span class="string">'name'</span>: <span class="string">'junkan'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'job'</span>: <span class="string">'programmer'</span>&#125;</span><br><span class="line"></span><br><span class="line">b = a.pop(<span class="string">'age'</span>)</span><br><span class="line"></span><br><span class="line">print(a) <span class="comment"># &#123;'name': 'junkan', 'job': 'programmer'&#125;</span></span><br><span class="line">print(b) <span class="comment"># 18</span></span><br></pre></td></tr></table></figure>

<p>(4).popitem() :随机删除和返回该键值对。字典是“无序可变序列”，因此没有第一个元素和最后一个元素的概念，若想一个接一个地移除并处理项，这个方法就非常有效(因为不用首先获取键的列表)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">'name'</span>: <span class="string">'junkan'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'job'</span>: <span class="string">'programmer'</span>&#125;</span><br><span class="line"></span><br><span class="line">b = a.popitem()</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'junkan'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">(<span class="string">'job'</span>, <span class="string">'programmer'</span>)</span><br><span class="line"></span><br><span class="line">b = a.popitem()</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'junkan'</span>&#125;</span><br><span class="line">(<span class="string">'age'</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">b = a.popitem()</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">&#123;&#125;</span><br><span class="line">(<span class="string">'name'</span>, <span class="string">'junkan'</span>)</span><br><span class="line"><span class="comment"># 注意:python3.6是删除最后一个</span></span><br></pre></td></tr></table></figure>

<p>4.字典的序列解包</p>
<p>序列解包可以用于元组、列表、字典。序列解包可以让我们方便的对多个变量赋值。 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用于元祖</span></span><br><span class="line">x, y, z = (<span class="number">20</span>, <span class="number">30</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">print(x) <span class="comment"># 20</span></span><br><span class="line">print(y) <span class="comment"># 30</span></span><br><span class="line">print(z) <span class="comment"># 10</span></span><br></pre></td></tr></table></figure>

<p>序列解包用于字典时，默认是对“键”进行操作; 如果需要对键值对操作，则需要使用items();如果需要对“值”进行操作，则需要使用values() </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># items()</span></span><br><span class="line">a = &#123;<span class="string">'name'</span>: <span class="string">'junkan'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'job'</span>: <span class="string">'programmer'</span>&#125;</span><br><span class="line">name, age, job = a.items()</span><br><span class="line">print(name)</span><br><span class="line">print(age)</span><br><span class="line">print(job)</span><br><span class="line"></span><br><span class="line"><span class="comment"># values() </span></span><br><span class="line">a = &#123;<span class="string">'name'</span>: <span class="string">'junkan'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'job'</span>: <span class="string">'programmer'</span>&#125;</span><br><span class="line">name, age, job = a.values()</span><br><span class="line">print(name)</span><br><span class="line">print(age)</span><br><span class="line">print(job)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认是key</span></span><br><span class="line">a = &#123;<span class="string">'name'</span>: <span class="string">'junkan'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'job'</span>: <span class="string">'programmer'</span>&#125;</span><br><span class="line">name, age, job = a</span><br><span class="line">print(name)</span><br><span class="line">print(age)</span><br><span class="line">print(job)</span><br></pre></td></tr></table></figure>

<p>三:个人总结</p>
<p>字典(dict)是python中唯⼀的⼀个映射类型.他是以{ }括起来的键值对组成.</p>
<p>在dict中key是 唯⼀的.在保存的时候, 根据key来计算出⼀个内存地址. 然后将key-value保存在这个地址中，这种算法被称为hash算法, 所以, 切记, 在dict中存储的key-value中的key必须是可hash的, 如果你搞不懂什么是可哈希, 暂时可以这样记,</p>
<p>可以改变的都是不可哈希的, 那么可哈希就意味着不可变. 这个是为了能准确的计算内存地址⽽规定的.</p>
<p>已知的可哈希(不可变)的数据类型: int, str, tuple, bool 不可哈希(可变)的数据类型: list, dict, set</p>
]]></content>
      <categories>
        <category>python教程</category>
      </categories>
      <tags>
        <tag>python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>RF中常见关键字的用法之Builtln-Control</title>
    <url>/2019/12/03/RF%E4%B8%AD%E5%B8%B8%E8%A7%81%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E7%94%A8%E6%B3%95%E4%B9%8BBuiltln-Control/</url>
    <content><![CDATA[<p>说明:这部分关键字是RF中控制循环的终止以及对返回值的控制,</p>
<p>(1).return_from_keyword(self, *return_values)</p>
<p>定义:从用户关键字中返回值</p>
<p>*return_values:可以允许返回多个值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*** Test Case ***</span><br><span class="line">测试case</span><br><span class="line">    @&#123;LIST&#125;                     Create List                       foo                         baz</span><br><span class="line">    $&#123;index&#125; =                  FindIndex                         baz                         @&#123;LIST&#125;</span><br><span class="line">    Should Be Equal             $&#123;index&#125;                          $&#123;1&#125;</span><br><span class="line">    $&#123;index&#125; =                  FindIndex                         non existing                @&#123;LIST&#125;</span><br><span class="line">    Should Be Equal             $&#123;index&#125;                          $&#123;-1&#125;</span><br><span class="line"></span><br><span class="line">*** Keywords ***</span><br><span class="line">FindIndex</span><br><span class="line">    [Arguments]                 $&#123;element&#125;                        @&#123;items&#125;</span><br><span class="line">    $&#123;index&#125; =                  Set Variable                      $&#123;0&#125;</span><br><span class="line">    :FOR  $&#123;item&#125;  IN  @&#123;items&#125;</span><br><span class="line">    \    Run Keyword If         &apos;$&#123;item&#125;&apos; == &apos;$&#123;element&#125;&apos;         Return From Keyword         $&#123;index&#125;</span><br><span class="line">    \    $&#123;index&#125; =             Set Variable                      $&#123;index + 1&#125;</span><br><span class="line">    Return From Keyword         $&#123;-1&#125;</span><br><span class="line"># 打印结果:</span><br><span class="line">INFO : @&#123;LIST&#125; = [ foo | baz ]</span><br><span class="line">.</span><br><span class="line">INFO : $&#123;index&#125; = 0</span><br><span class="line"></span><br><span class="line">INFO : $&#123;index&#125; = 1</span><br><span class="line">..</span><br><span class="line">INFO : $&#123;index&#125; = 0</span><br><span class="line"></span><br><span class="line">INFO : $&#123;index&#125; = 1</span><br><span class="line"></span><br><span class="line">INFO : $&#123;index&#125; = 2</span><br><span class="line"></span><br><span class="line">INFO : $&#123;index&#125; = -1</span><br><span class="line"></span><br><span class="line"># 说明:return_from_keyword_if更加简单一点，推荐使用</span><br><span class="line">*** Keywords ***</span><br><span class="line">FindIndex</span><br><span class="line">    [Arguments]                         $&#123;element&#125;                        @&#123;items&#125;</span><br><span class="line">    $&#123;index&#125; =                          Set Variable                      $&#123;0&#125;</span><br><span class="line">    :FOR  $&#123;item&#125;  IN  @&#123;items&#125;</span><br><span class="line">    \    Return From Keyword If         &apos;$&#123;item&#125;&apos; == &apos;$&#123;element&#125;&apos;         $&#123;index&#125;</span><br><span class="line">    \    $&#123;index&#125; =                     Set Variable                      $&#123;index + 1&#125;</span><br><span class="line">    Return From Keyword                 $&#123;-1&#125;</span><br></pre></td></tr></table></figure>

<p>(2).exit_for_loop_if(self, condition))</p>
<p>定义:根据条件停止整个for循环</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@&#123;LIST&#125;                       Create List                    foo         EXIT         baz</span><br><span class="line">:FOR  $&#123;element&#125;  IN  @&#123;LIST&#125;</span><br><span class="line">\    Exit For Loop If         &apos;$&#123;element&#125;&apos; == &apos;EXIT&apos;</span><br><span class="line">\    Log                      $&#123;element&#125;</span><br><span class="line"></span><br><span class="line"># 打印结果：</span><br><span class="line">INFO : @&#123;LIST&#125; = [ foo | EXIT | baz ]</span><br><span class="line">.</span><br><span class="line">INFO : foo</span><br><span class="line"></span><br><span class="line">INFO : Exiting for loop altogether.</span><br></pre></td></tr></table></figure>

<p>(3).continue_for_loop_if(self, condition)</p>
<p>定义:根据条件停止当前循环</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@&#123;LIST&#125;                       Create List                    foo         EXIT         baz</span><br><span class="line">:FOR  $&#123;element&#125;  IN  @&#123;LIST&#125;</span><br><span class="line">\    Exit For Loop If         &apos;$&#123;element&#125;&apos; == &apos;EXIT&apos;</span><br><span class="line">\    Log                      $&#123;element&#125;</span><br><span class="line"># 打印结果：</span><br><span class="line">INFO : @&#123;LIST&#125; = [ foo | EXIT | baz ]</span><br><span class="line">.</span><br><span class="line">INFO : foo</span><br><span class="line"></span><br><span class="line">INFO : Continuing for loop from the next iteration.</span><br><span class="line"></span><br><span class="line">INFO : baz</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>robot framework教程</category>
      </categories>
      <tags>
        <tag>robot framework</tag>
      </tags>
  </entry>
  <entry>
    <title>RF中常见关键字的用法之Builtln-Converter</title>
    <url>/2019/11/27/RF%E4%B8%AD%E5%B8%B8%E8%A7%81%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E7%94%A8%E6%B3%95%E4%B9%8BBuiltln-Converter/</url>
    <content><![CDATA[<p>说明:本文主要涉及到Builtln模块中的Converter转换操作，例如convert_to_integer，convert_to_binary等等，但是我主要是想讲解其中常用的2个关键字，分别是create_list与create_dictionary，对于其他的转换请大家自己阅读源码以及官方文档。</p>
<p>(1).create_list(self, *items)</p>
<p>定义:返回包含给定items的列表，可以将返回的列表分配给${scalar}和@{list} 变量</p>
<p>*items:可变的参数列表</p>
<p>以下是关于create_list这个关键字的基本操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建@list变量的list列表</span><br><span class="line">@&#123;list&#125;          Create List             a         b         c</span><br><span class="line">Log              ----@&#123;list&#125;----</span><br><span class="line"># @&#123;list&#125; = [ a | b | c ]</span><br><span class="line"># 打印结果:----[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]----</span><br><span class="line"></span><br><span class="line"># 创建$&#123;scalar&#125;变量的列表</span><br><span class="line">$&#123;scalar&#125;         Create List               a         b         c</span><br><span class="line">Log               ----$&#123;scalar&#125;----</span><br><span class="line"># $&#123;scalar&#125; = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]</span><br><span class="line"># 打印结果:----[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]----</span><br><span class="line"></span><br><span class="line"># 创建int类型list的列表</span><br><span class="line">$&#123;ints&#125;          Create List              $&#123;1&#125;         $&#123;2&#125;         $&#123;3&#125;</span><br><span class="line">Log              ----$&#123;ints&#125;----</span><br><span class="line"># $&#123;ints&#125; = [1, 2, 3]</span><br><span class="line"># 打印结果:----[1, 2, 3]----</span><br><span class="line"></span><br><span class="line"># 创建$&#123;scalar&#125;变量，通过int类型创建的列表</span><br><span class="line">$&#123;ints1&#125;         Create List              1            2            3</span><br><span class="line">Log              ----$&#123;ints1&#125;----</span><br><span class="line"># $&#123;ints1&#125; = [&apos;1&apos;, &apos;2&apos;, &apos;3&apos;]</span><br><span class="line"># 打印结果:----[&apos;1&apos;, &apos;2&apos;, &apos;3&apos;]----</span><br></pre></td></tr></table></figure>

<p>好了，看到这里可能有很多人有点懵逼了，不就是创建一个简单的list类型的变量吗，为啥一下使用@list类型的变量，一下又是${scalar}类型是的变量，关键是打印出来的结果是一样的。有什么区别吗？那么下面我来对比一下他们之间的区别，在说两者之间的区别的时候，我想先说说在rf里面的变量的基本使用情况。</p>
<p>首先要说的就是在RF框架中我们常用的变量有两类，一类是scalar类型的变量，另一类是list类型的变量，scalar类型的变量用’$‘做标识符，类似于上文中的${scalar}，list类型的变量用‘@’做标识符，类似我们上文中提到的@{list}，从标识上我们先简单的这样区分，list大家都很容易知道什么意思，就是我们经常使用的列表，那么什么是Scala呢？从中文的字面意思上来说叫做标量，从我个人使用的情况来看，我喜欢叫他单值变量，其实单值变量不仅仅是我们日常中的字符串，数值这样的，像单个对象或者是字典也是单值变量，因此从定义上来说@标识的变量肯定是list，但是’$‘标识的变量不一定是list，因为在rf中变量之间是可以进行转换的，例如：使用’$‘标识的变量也可以接收list值之后转变成list变量。后面会说如何进行转换。    </p>
<p>那么在rf中变量之间是如何进行转换的呢？</p>
<p>i.@{list}类型的变量转换为${scalar}类型的变量。</p>
<p>这种转换的效果是将整个的list变成scalar，但是这种转换方式我个人觉得适用于那些只接受scalar变量参数的关键字，但是又想传入全部的list的值时使用，或者是就是单纯的想把list类型的变量当做是scalar类型的变量使用的情况：</p>
<p>举例说明：</p>
<p>对于Log这个关键字来说他是需要传入2个scalar类型的参数，一个是msg，另外一个是level，其中level的默认值为’info’。这个例子中简单的将@{a}转变成了${a}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 使用@&#123;list&#125;来给Log关键字传值</span><br><span class="line">@&#123;a&#125;             Create List         abc         efg</span><br><span class="line">Log              @&#123;a&#125;</span><br><span class="line"># 打印结果:FAIL : Invalid log level &apos;efg&apos;,因为在这种情况下如果直接给Log赋值为@&#123;a&#125;,其实是将这个list中的第一个值abc赋值给msg，第二个值赋值给level，因为level中没有egf这个值，因此就会报错</span><br><span class="line"></span><br><span class="line"># 使用$&#123;list&#125;来给Log关键字传值</span><br><span class="line">@&#123;a&#125;             Create List         abc         efg</span><br><span class="line">Log              $&#123;a&#125;</span><br><span class="line"># 打印结果:INFO : [&apos;abc&apos;, &apos;efg&apos;]，这种情况下我们发现没有问题，是因为我们将@&#123;a&#125;转换为$&#123;a&#125;这种形式形成了一个单值变量，这样传值的时候就将[&apos;abc&apos;, &apos;efg&apos;]一起传给了msg，level不受影响还是默认的info。</span><br></pre></td></tr></table></figure>

<p>ii.${scalar}类型的变量转变成@{list}类型的变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;a&#125;             Create List         abc         efg</span><br><span class="line">Log              $&#123;a&#125;</span><br><span class="line"># 打印结果:NFO : [&apos;abc&apos;, &apos;efg&apos;]</span><br><span class="line"></span><br><span class="line">$&#123;a&#125;             Create List         abc         efg</span><br><span class="line">Log              ---@&#123;a&#125;---</span><br><span class="line"># 打印结果:INFO : ---[&apos;abc&apos;, &apos;efg&apos;]---,其实在通过Create List这个关键字在创建$&#123;a&#125;这个变量的时候已经是list类型的变量了，因为Log只能接收scalr类型的变量，因此需要加点其他的字符打印</span><br></pre></td></tr></table></figure>

<p>说到这里可能还有些小伙伴不明白，其实我们在进行变量之间的转换的时候中间还有一点相互转换的限制。</p>
<p>我们都知道在无论是哪种语言中变量的使用都需要进行初始化之后才能够使用，python中也不例外。我前面将‘@{a}’转换为’${a}’ ，然后又将’${a}’转换为‘@{a}’,我们rf框架会默认’${a}’是‘@{a}’ 的salar的形式,‘@{a}’是’${a}’的list形式，如果要想完成这样的转换，那么在这里的限制就是变量没有被初始化或者赋值过，如果变量被初始化或者被赋值过，那么这两个变量就会各自独立了。</p>
<p>举例说明:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@&#123;a&#125;             Create List         abc          efg</span><br><span class="line">Log              $&#123;a&#125;</span><br><span class="line">$&#123;a&#125;             Create List         abcd         efgf</span><br><span class="line">Log              $&#123;a&#125;</span><br><span class="line"># 打印结果:</span><br><span class="line">INFO : @&#123;a&#125; = [ abc | efg ]</span><br><span class="line">INFO : [&apos;abc&apos;, &apos;efg&apos;]</span><br><span class="line">INFO : $&#123;a&#125; = [&apos;abcd&apos;, &apos;efgf&apos;]</span><br><span class="line">INFO : [&apos;abcd&apos;, &apos;efgf&apos;]</span><br><span class="line">说明:在第一行中@&#123;a&#125;被初始化，但是$&#123;a&#125;没有被初始化，因此$&#123;a&#125;打印出来的值跟@&#123;a&#125;打印出来的值一样，但是在第三行中$&#123;a&#125;被初始化之后，此时打印出来的$&#123;a&#125;就不是之前的@&#123;a&#125;了，而是重新赋值的$&#123;a&#125;了</span><br></pre></td></tr></table></figure>

<p>综上所述: 这边我总结一下，如果我们以后再rf中使用变量的时候，如果想将一个变量转变成另外一个变量，只要目标的变量没有被初始化过或者赋值过我们都是可以进行相互之间的转化的，但是如果被初始化过或者赋值过那么我们就无法进行相互的转换了，这点我们在进行用例设计的时候应该需要注意。经过我的这番说明，小伙伴们应该知道为啥开始的时候一下使用@list类型的变量，一下又是${scalar}类型的变量了吧，其实没啥区别，大家在以后的工作中妥善使用就好了，建议是如果不做循环的时候我们就使用’${}’就可以了，如果需要进行循环的时候我们就使用‘@{}’。</p>
<p>(2).create_dictionary(self, *items)</p>
<p>定义:根据给定的内容创建并返回一个字典items</p>
<p>*items:可变的参数列表</p>
<p>以下是关于create_dictionary这个关键字的基本操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># key=value形式创建字典并打印&amp;&#123;dict&#125; -fail</span><br><span class="line">&amp;&#123;dict&#125;          Create Dictionary         key=value         foo=bar</span><br><span class="line">Log              &amp;&#123;dict&#125;</span><br><span class="line"># 打印结果:Log ➞ Keyword &apos;BuiltIn.Log&apos; expected 1 to 5 arguments, got 0.</span><br><span class="line"></span><br><span class="line"># key=value形式创建字典并打印$&#123;dict&#125; -pass</span><br><span class="line">&amp;&#123;dict&#125;          Create Dictionary         key=value         foo=bar</span><br><span class="line">Log              $&#123;dict&#125;</span><br><span class="line"># 打印结果:INFO : &#123;&apos;key&apos;: &apos;value&apos;, &apos;foo&apos;: &apos;bar&apos;&#125;,原因在这里就不做分析了，跟上文中的create_list一样</span><br><span class="line"></span><br><span class="line"># key,value打散的形式创建字典并打印$&#123;dict&#125; -pass</span><br><span class="line">&amp;&#123;dict&#125;          Create Dictionary         key         value         foo         bar</span><br><span class="line">Log              $&#123;dict&#125;</span><br><span class="line"></span><br><span class="line"># 向一个字典中添加元素</span><br><span class="line">&amp;&#123;dict&#125;          Create Dictionary         key=value         foo=bar</span><br><span class="line">&amp;&#123;dict1&#125;         Create Dictionary         $&#123;1&#125;=$&#123;2&#125;         &amp;&#123;dict&#125;         foo=new</span><br><span class="line">Log              $&#123;dict1&#125;</span><br></pre></td></tr></table></figure>

<p>说明:如果要比较两个字典是否相等，应该要转换为$的形式去比较，&amp;的形式会报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 字典比较时使用&amp; -fail</span><br><span class="line">&amp;&#123;dict1&#125;                Create Dictionary         key=value         foo=bar</span><br><span class="line">&amp;&#123;dict2&#125;                Create Dictionary         key=value         foo=bar</span><br><span class="line">Should Be Equal         &amp;&#123;dict1&#125;                  &amp;&#123;dict2&#125;</span><br><span class="line"># 打印结果:FAIL : Keyword &apos;BuiltIn.Should Be Equal&apos; expected 2 to 5 arguments, got 0.</span><br><span class="line"></span><br><span class="line"># 字典比较时使用$ -pass</span><br><span class="line">&amp;&#123;dict1&#125;                Create Dictionary         key=value         foo=bar</span><br><span class="line">&amp;&#123;dict2&#125;                Create Dictionary         key=value         foo=bar</span><br><span class="line">Should Be Equal         $&#123;dict1&#125;                  $&#123;dict2&#125;</span><br></pre></td></tr></table></figure>

<p>说明:建议循环访问字典的时候将$改为&amp;</p>
]]></content>
      <categories>
        <category>robot framework教程</category>
      </categories>
      <tags>
        <tag>robot framework</tag>
      </tags>
  </entry>
  <entry>
    <title>RF中常见关键字的用法之Builtln-Verify</title>
    <url>/2019/11/26/RF%E4%B8%AD%E5%B8%B8%E8%A7%81%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E7%94%A8%E6%B3%95%E4%B9%8BBuiltln-Verify/</url>
    <content><![CDATA[<p>本文阅读说明:</p>
<p>1.代码调试工具为VScode，python版本为python3，robot framework版本为3.1.1，如有涉及到3.1.1版本之后的内容会特别声明备注。</p>
<p>2.由于RF框架中Builtln-Verify中很多关键字的使用方法一样，只要了解一个的使用方法就能了解类似其他的，例如：should_be_true/should_not_be_true，should_be_equal/should_not_be_equal，等等，因此由于篇幅有限，只说明其中部分常用的关键字。</p>
<p>(1).should_be_true(self, condition, msg=None)</p>
<p>定义:如果给定条件(condition)不成立,则失败。</p>
<p>condition:给定判断的条件</p>
<p>msg:校验失败之后的消息打印，默认为None</p>
<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 单个条件比较大小校验-pass</span><br><span class="line">$&#123;rc&#125;                  Set Variable         $&#123;5&#125;</span><br><span class="line">Should Be True         $&#123;rc&#125; &lt; 10</span><br><span class="line"></span><br><span class="line"># 单个条件比较大小校验-fail</span><br><span class="line">$&#123;rc&#125;                  Set Variable         $&#123;11&#125;</span><br><span class="line">Should Be True         $&#123;rc&#125; &lt; 10</span><br><span class="line"># 打印结果:FAIL : &apos;11 &lt; 10&apos; should be true.</span><br><span class="line"></span><br><span class="line"># 单个条件相等校验-pass</span><br><span class="line">$&#123;status&#125;              Set Variable                  PASS</span><br><span class="line">Should Be True         &apos;$&#123;status&#125;&apos; == &apos;PASS&apos;</span><br><span class="line">注意:字符串进行比较的时候需要加引号,如果不加引号的话就会报错,打印结果: FAIL : Evaluating expression &apos;PASS == PASS&apos; failed: NameError: name &apos;PASS&apos; is not defined</span><br><span class="line"></span><br><span class="line"># 数字类型校验</span><br><span class="line">$&#123;number1&#125;             Set Variable         1</span><br><span class="line">$&#123;number2&#125;             Set Variable         -1</span><br><span class="line">$&#123;number3&#125;             Set Variable         0</span><br><span class="line">Should Be True         $&#123;number1&#125; # pass</span><br><span class="line">Should Be True         $&#123;number2&#125; # pass</span><br><span class="line">Should Be True         $&#123;number3&#125; # fail</span><br><span class="line">注意:只有条件不为0的情况下才是通过的，如果判断的条件为0，那么报错。打印结果:FAIL : &apos;0&apos; should be true</span><br><span class="line"></span><br><span class="line"># 容器数据类型list校验-pass</span><br><span class="line">$&#123;list&#125;                Create List         1         2         3</span><br><span class="line">Should Be True         $&#123;list&#125;</span><br><span class="line"></span><br><span class="line"># 容器数据类型校验-fail</span><br><span class="line">$&#123;list&#125;                Create List</span><br><span class="line">Should Be True         $&#123;list&#125;</span><br><span class="line">注意:只有list不为空的情况下才能校验通过，如果list为空报错，打印结果: FAIL : &apos;[]&apos; should be true，字典也是一样</span><br><span class="line"></span><br><span class="line"># msg消息打印</span><br><span class="line">$&#123;rc&#125;                  Set Variable         $&#123;12&#125;</span><br><span class="line">Should Be True         $&#123;rc&#125; &lt; 10           message=校验通过</span><br><span class="line"># 打印结果:FAIL : message=校验通过</span><br></pre></td></tr></table></figure>

<p>(2).should_be_equal(self, first, second, msg=None, values=True,ignore_case=False)</p>
<p>定义:如果给定对象不相等，则失败。</p>
<p>first:第一个对象</p>
<p>second:第二个对象</p>
<p>msg:校验失败打印的消息，默认为None，如果msg未给出，则错误消息为first != second</p>
<p>values:如果values为true则打印错误消息格式为msg:first != second，如果values为false则打印错误消息格式为msg</p>
<p>ignore_case:是否忽略大小写，默认不忽略</p>
<p>注意:在RF3.1.2中版本中新增了formatter =’str’这个参数，控制如何格式化值，默认为str，在我们这个3.1.1版本中暂时不展示</p>
<p>举例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 没有msg信息 -pass</span><br><span class="line">$&#123;a&#125;                    Create List         1            2         3</span><br><span class="line">$&#123;b&#125;                    Create List         1            2         3</span><br><span class="line">Should Be Equal         $&#123;a&#125;                $&#123;b&#125;</span><br><span class="line"># 没有msg信息 -fail</span><br><span class="line">$&#123;a&#125;                    Create List         1            2         3</span><br><span class="line">$&#123;b&#125;                    Create List         1            4         3</span><br><span class="line">Should Be Equal         $&#123;a&#125;                $&#123;b&#125;</span><br><span class="line"># 打印结果: FAIL : [&apos;1&apos;, &apos;2&apos;, &apos;3&apos;] != [&apos;1&apos;, &apos;4&apos;, &apos;3&apos;]</span><br><span class="line"></span><br><span class="line"># 自定义msg -fail</span><br><span class="line">$&#123;a&#125;                    Create List         1            2                      3</span><br><span class="line">$&#123;b&#125;                    Create List         1            4                      3</span><br><span class="line">Should Be Equal         $&#123;a&#125;                $&#123;b&#125;         测试失败</span><br><span class="line"># 打印结果: 测试失败: [&apos;1&apos;, &apos;2&apos;, &apos;3&apos;] != [&apos;1&apos;, &apos;4&apos;, &apos;3&apos;]</span><br><span class="line"></span><br><span class="line"># 自定义msg和values，且values为布尔类型False</span><br><span class="line">$&#123;a&#125;                    Create List         1            2                      3</span><br><span class="line">$&#123;b&#125;                    Create List         1            4                      3</span><br><span class="line">Should Be Equal         $&#123;a&#125;                $&#123;b&#125;         测试失败         False</span><br><span class="line"># 打印结果:FAIL : 测试失败</span><br><span class="line"></span><br><span class="line"># ignore_case默认不忽略大小写 -fail</span><br><span class="line">$&#123;a&#125;                    Set Variable         abc</span><br><span class="line">$&#123;b&#125;                    Set Variable         Abc</span><br><span class="line">Should Be Equal         $&#123;a&#125;                 $&#123;b&#125;</span><br><span class="line"># 打印结果:abc != Abc</span><br><span class="line"></span><br><span class="line"># ignore_case忽略大小写 -pass</span><br><span class="line">$&#123;a&#125;                    Set Variable         abc</span><br><span class="line">$&#123;b&#125;                    Set Variable         Abc</span><br><span class="line">Should Be Equal         $&#123;a&#125;                 $&#123;b&#125;         忽略大小写         True       True</span><br></pre></td></tr></table></figure>

<p>(3).should_be_equal_as_integers(self,first, second, msg=None, values=True,base=None)</p>
<p>定义:将对象转换为整数后，如果对象不相等则失败。</p>
<p>first:第一个对象</p>
<p>second:第二个对象</p>
<p>msg:校验失败打印的消息，默认为None，如果msg未给出,则错误消息为。first != second</p>
<p>values:如果values为true则打印错误消息格式为msg:first != second,如果values为false则打印错误消息格式为msg</p>
<p>base:默认情况下应为以10为底的整数,可以修改转换的基数</p>
<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 没有msg -pass</span><br><span class="line">$&#123;a&#125;                                Set Variable         42</span><br><span class="line">$&#123;b&#125;                                Set Variable         $&#123;42&#125;</span><br><span class="line">Should Be Equal As Integers         $&#123;a&#125;                 $&#123;b&#125;</span><br><span class="line"></span><br><span class="line"># 有msg -fail</span><br><span class="line">$&#123;a&#125;                                Set Variable         42</span><br><span class="line">$&#123;b&#125;                                Set Variable         $&#123;43&#125;</span><br><span class="line">Should Be Equal As Integers         $&#123;a&#125;                 $&#123;b&#125;          message=转换失败</span><br><span class="line"># 打印结果: FAIL : message=转换失败: 42 != 43</span><br><span class="line"></span><br><span class="line"># 转换为16进制比较</span><br><span class="line">Should Be Equal As Integers         ABCD         abcd         base=16</span><br><span class="line"></span><br><span class="line"># 转换为默认的10进制比较</span><br><span class="line">Should Be Equal As Integers         0b1011         11</span><br></pre></td></tr></table></figure>

<p>说明:msg=None, values=True用法同上方法should_be_equal</p>
<p>(4).should_be_equal_as_numbers(self, first, second, msg=None, values=True,precision=6)</p>
<p>定义:将对象转换为实数后，如果对象不相等则失败。</p>
<p>irst:第一个对象</p>
<p>second:第二个对象</p>
<p>msg:校验失败打印的消息，默认为None，如果msg未给出,则错误消息为。first != second</p>
<p>values:如果values为true则打印错误消息格式为msg:first != second,如果values为false则打印错误消息格式为msg</p>
<p>precision:浮点数的四舍五入，保留小数点后面几位，默认保留小数点后面6位，忽略精度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 默认保留6位 -pass</span><br><span class="line">$&#123;a&#125;                               Set Variable         1.1</span><br><span class="line">Should Be Equal As Numbers         $&#123;a&#125;                 1.1</span><br><span class="line"></span><br><span class="line"># 保留小数点后面1位 -pass</span><br><span class="line">Should Be Equal As Numbers         1.123         1.1         precision=1</span><br><span class="line"># 保留小数点后面1位 -fail</span><br><span class="line">Should Be Equal As Numbers         1.223         1.1         precision=1</span><br><span class="line"># 打印结果: FAIL : 1.2 != 1.1</span><br><span class="line"></span><br><span class="line"># 保留整数位 -pass</span><br><span class="line">Should Be Equal As Numbers         1.223         1.4         precision=0</span><br><span class="line"># 保留整数位 -fail</span><br><span class="line">Should Be Equal As Numbers         2.223         1.4         precision=0</span><br><span class="line"># 打印结果: FAIL : 2.0 != 1.0</span><br></pre></td></tr></table></figure>

<p>说明:msg=None, values=True用法同上方法should_be_equal</p>
<p>(5).should_contain(self, container, item, msg=None, values=True,ignore_case=False)</p>
<p>定义:如果container不包含item一次或多次，则失败。适用于字符串，列表以及任何支持Python in 运算符的操作。</p>
<p>container:包含对象</p>
<p>item:被包含对象</p>
<p>msg:校验失败打印的消息，默认为None，如果msg未给出,则错误消息为。first != second</p>
<p>values:如果values为true则打印错误消息格式为msg:first != second，如果values为false则打印错误消息格式为msg</p>
<p>ignore_case:是否忽略大小写，默认不忽略</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># container包含item -pass</span><br><span class="line">$&#123;output&#125;              Set Variable         PASS12334</span><br><span class="line">Should Contain         $&#123;output&#125;            PASS</span><br><span class="line"># container不包含item -fail</span><br><span class="line">$&#123;output&#125;              Set Variable         PAS12334</span><br><span class="line">Should Contain         $&#123;output&#125;            PASS</span><br><span class="line"># 打印结果:FAIL : &apos;PAS12334&apos; does not contain &apos;PASS&apos;</span><br><span class="line"></span><br><span class="line"># 容器对象包含子对象</span><br><span class="line">$&#123;list&#125;                Create List         123         456                  789</span><br><span class="line">Should Contain         $&#123;list&#125;             456         msg=Failure!         values=False</span><br><span class="line"></span><br><span class="line"># 容器对象不包含子对象</span><br><span class="line">$&#123;list&#125;                Create List         123         456                  789</span><br><span class="line">Should Contain         $&#123;list&#125;             45          msg=Failure!         values=False</span><br><span class="line"># 打印结果: FAIL : Failure!</span><br><span class="line"></span><br><span class="line"># 容器对象包含子对象忽略大小写</span><br><span class="line">$&#123;list&#125;                Create List         ValuE         456                      789</span><br><span class="line">Should Contain         $&#123;list&#125;             value         ignore_case=True</span><br></pre></td></tr></table></figure>

<p>说明:msg=None, values=True用法同上方法should_be_equal</p>
<p>(6).should_contain_any(self, container, <em>items, *</em>configuration)</p>
<p>定义:如果container只要包含其中任何一个就成功，相当于or，只有 *items全部都不满足才失败</p>
<p>container:包含对象</p>
<p>*items:可变数量的子对象</p>
<p>**configuration:msg，values，ignore_case类型的配置</p>
<p>注意:这个方法是Robot Framework 3.0.1中的新增功能</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># *items全部不包含 -fail</span><br><span class="line">$&#123;string&#125;                  Set Variable         ValuE</span><br><span class="line">Should Contain Any         $&#123;string&#125;            x             y         z</span><br><span class="line"># 打印结果:FAIL : &apos;ValuE&apos; does not contain any of &apos;x&apos;, &apos;y&apos; or &apos;z&apos;</span><br><span class="line"></span><br><span class="line"># *items全部包含其中一个 -pass</span><br><span class="line">$&#123;string&#125;                  Set Variable         ValuE</span><br><span class="line">Should Contain Any         $&#123;string&#125;            x             y         u</span><br></pre></td></tr></table></figure>

<p>说明:msg=None, values=True用法同上方法should_be_equal</p>
<p>(7).get_length(self, item)</p>
<p>定义:返回并以整数形式记录给定item的长度,该item可以是任何具有长度的内容，例如字符串，列表或字典。关键字首先尝试使用Python函数获取长度，该函数len在’<strong>len</strong>‘内部调用该item的方法。如果失败，则关键字尝试直接调用该item的length和size方法。最后的尝试是尝试获取item的length属性的值。如果所有这些尝试均未成功，则关键字失败。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 计算字符串的长度</span><br><span class="line">$&#123;length&#125;   Get Length    Hello, world!      </span><br><span class="line">Should Be Equal As Integers   $&#123;length&#125;     13  </span><br><span class="line"></span><br><span class="line"># 计算list的长度</span><br><span class="line">@&#123;list&#125;     Create List   Hello,        world! </span><br><span class="line">$&#123;length&#125;    Get Length   $&#123;list&#125;     </span><br><span class="line">Should Be Equal As Integers   $&#123;length&#125;      2</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>robot framework教程</category>
      </categories>
      <tags>
        <tag>robot framework</tag>
      </tags>
  </entry>
</search>
