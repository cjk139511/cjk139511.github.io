<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>RF中常见关键字的用法之Builtln-Verify</title>
    <url>/2019/11/26/RF%E4%B8%AD%E5%B8%B8%E8%A7%81%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E7%94%A8%E6%B3%95%E4%B9%8BBuiltln-Verify/</url>
    <content><![CDATA[<p>本文阅读说明:</p>
<p>1.代码调试工具为VScode，python版本为python3，robot framework版本为3.1.1，如有涉及到3.1.1版本之后的内容会特别声明备注。</p>
<p>2.由于RF框架中Builtln-Verify中很多关键字的使用方法一样，只要了解一个的使用方法就能了解类似其他的，例如：should_be_true/should_not_be_true，should_be_equal/should_not_be_equal，等等，因此由于篇幅有限，只说明其中部分常用的关键字。</p>
<p>(1).should_be_true(self, condition, msg=None)</p>
<p>定义:如果给定条件(condition)不成立,则失败。</p>
<p>condition:给定判断的条件</p>
<p>msg:校验失败之后的消息打印，默认为None</p>
<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 单个条件比较大小校验-pass</span><br><span class="line">$&#123;rc&#125;                  Set Variable         $&#123;5&#125;</span><br><span class="line">Should Be True         $&#123;rc&#125; &lt; 10</span><br><span class="line"></span><br><span class="line"># 单个条件比较大小校验-fail</span><br><span class="line">$&#123;rc&#125;                  Set Variable         $&#123;11&#125;</span><br><span class="line">Should Be True         $&#123;rc&#125; &lt; 10</span><br><span class="line"># 打印结果:FAIL : &apos;11 &lt; 10&apos; should be true.</span><br><span class="line"></span><br><span class="line"># 单个条件相等校验-pass</span><br><span class="line">$&#123;status&#125;              Set Variable                  PASS</span><br><span class="line">Should Be True         &apos;$&#123;status&#125;&apos; == &apos;PASS&apos;</span><br><span class="line">注意:字符串进行比较的时候需要加引号,如果不加引号的话就会报错,打印结果: FAIL : Evaluating expression &apos;PASS == PASS&apos; failed: NameError: name &apos;PASS&apos; is not defined</span><br><span class="line"></span><br><span class="line"># 数字类型校验</span><br><span class="line">$&#123;number1&#125;             Set Variable         1</span><br><span class="line">$&#123;number2&#125;             Set Variable         -1</span><br><span class="line">$&#123;number3&#125;             Set Variable         0</span><br><span class="line">Should Be True         $&#123;number1&#125; # pass</span><br><span class="line">Should Be True         $&#123;number2&#125; # pass</span><br><span class="line">Should Be True         $&#123;number3&#125; # fail</span><br><span class="line">注意:只有条件不为0的情况下才是通过的，如果判断的条件为0，那么报错。打印结果:FAIL : &apos;0&apos; should be true</span><br><span class="line"></span><br><span class="line"># 容器数据类型list校验-pass</span><br><span class="line">$&#123;list&#125;                Create List         1         2         3</span><br><span class="line">Should Be True         $&#123;list&#125;</span><br><span class="line"></span><br><span class="line"># 容器数据类型校验-fail</span><br><span class="line">$&#123;list&#125;                Create List</span><br><span class="line">Should Be True         $&#123;list&#125;</span><br><span class="line">注意:只有list不为空的情况下才能校验通过，如果list为空报错，打印结果: FAIL : &apos;[]&apos; should be true，字典也是一样</span><br><span class="line"></span><br><span class="line"># msg消息打印</span><br><span class="line">$&#123;rc&#125;                  Set Variable         $&#123;12&#125;</span><br><span class="line">Should Be True         $&#123;rc&#125; &lt; 10           message=校验通过</span><br><span class="line"># 打印结果:FAIL : message=校验通过</span><br></pre></td></tr></table></figure>

<p>(2).should_be_equal(self, first, second, msg=None, values=True,ignore_case=False)</p>
<p>定义:如果给定对象不相等，则失败。</p>
<p>first:第一个对象</p>
<p>second:第二个对象</p>
<p>msg:校验失败打印的消息，默认为None，如果msg未给出，则错误消息为first != second</p>
<p>values:如果values为true则打印错误消息格式为msg:first != second，如果values为false则打印错误消息格式为msg</p>
<p>ignore_case:是否忽略大小写，默认不忽略</p>
<p>注意:在RF3.1.2中版本中新增了formatter =’str’这个参数，控制如何格式化值，默认为str，在我们这个3.1.1版本中暂时不展示</p>
<p>举例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 没有msg信息 -pass</span><br><span class="line">$&#123;a&#125;                    Create List         1            2         3</span><br><span class="line">$&#123;b&#125;                    Create List         1            2         3</span><br><span class="line">Should Be Equal         $&#123;a&#125;                $&#123;b&#125;</span><br><span class="line"># 没有msg信息 -fail</span><br><span class="line">$&#123;a&#125;                    Create List         1            2         3</span><br><span class="line">$&#123;b&#125;                    Create List         1            4         3</span><br><span class="line">Should Be Equal         $&#123;a&#125;                $&#123;b&#125;</span><br><span class="line"># 打印结果: FAIL : [&apos;1&apos;, &apos;2&apos;, &apos;3&apos;] != [&apos;1&apos;, &apos;4&apos;, &apos;3&apos;]</span><br><span class="line"></span><br><span class="line"># 自定义msg -fail</span><br><span class="line">$&#123;a&#125;                    Create List         1            2                      3</span><br><span class="line">$&#123;b&#125;                    Create List         1            4                      3</span><br><span class="line">Should Be Equal         $&#123;a&#125;                $&#123;b&#125;         测试失败</span><br><span class="line"># 打印结果: 测试失败: [&apos;1&apos;, &apos;2&apos;, &apos;3&apos;] != [&apos;1&apos;, &apos;4&apos;, &apos;3&apos;]</span><br><span class="line"></span><br><span class="line"># 自定义msg和values，且values为布尔类型False</span><br><span class="line">$&#123;a&#125;                    Create List         1            2                      3</span><br><span class="line">$&#123;b&#125;                    Create List         1            4                      3</span><br><span class="line">Should Be Equal         $&#123;a&#125;                $&#123;b&#125;         测试失败         False</span><br><span class="line"># 打印结果:FAIL : 测试失败</span><br><span class="line"></span><br><span class="line"># ignore_case默认不忽略大小写 -fail</span><br><span class="line">$&#123;a&#125;                    Set Variable         abc</span><br><span class="line">$&#123;b&#125;                    Set Variable         Abc</span><br><span class="line">Should Be Equal         $&#123;a&#125;                 $&#123;b&#125;</span><br><span class="line"># 打印结果:abc != Abc</span><br><span class="line"></span><br><span class="line"># ignore_case忽略大小写 -pass</span><br><span class="line">$&#123;a&#125;                    Set Variable         abc</span><br><span class="line">$&#123;b&#125;                    Set Variable         Abc</span><br><span class="line">Should Be Equal         $&#123;a&#125;                 $&#123;b&#125;         忽略大小写         True       True</span><br></pre></td></tr></table></figure>

<p>(3).should_be_equal_as_integers(self,first, second, msg=None, values=True,base=None)</p>
<p>定义:将对象转换为整数后，如果对象不相等则失败。</p>
<p>first:第一个对象</p>
<p>second:第二个对象</p>
<p>msg:校验失败打印的消息，默认为None，如果msg未给出,则错误消息为。first != second</p>
<p>values:如果values为true则打印错误消息格式为msg:first != second,如果values为false则打印错误消息格式为msg</p>
<p>base:默认情况下应为以10为底的整数,可以修改转换的基数</p>
<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 没有msg -pass</span><br><span class="line">$&#123;a&#125;                                Set Variable         42</span><br><span class="line">$&#123;b&#125;                                Set Variable         $&#123;42&#125;</span><br><span class="line">Should Be Equal As Integers         $&#123;a&#125;                 $&#123;b&#125;</span><br><span class="line"></span><br><span class="line"># 有msg -fail</span><br><span class="line">$&#123;a&#125;                                Set Variable         42</span><br><span class="line">$&#123;b&#125;                                Set Variable         $&#123;43&#125;</span><br><span class="line">Should Be Equal As Integers         $&#123;a&#125;                 $&#123;b&#125;          message=转换失败</span><br><span class="line"># 打印结果: FAIL : message=转换失败: 42 != 43</span><br><span class="line"></span><br><span class="line"># 转换为16进制比较</span><br><span class="line">Should Be Equal As Integers         ABCD         abcd         base=16</span><br><span class="line"></span><br><span class="line"># 转换为默认的10进制比较</span><br><span class="line">Should Be Equal As Integers         0b1011         11</span><br></pre></td></tr></table></figure>

<p>说明:msg=None, values=True用法同上方法should_be_equal</p>
<p>(4).should_be_equal_as_numbers(self, first, second, msg=None, values=True,precision=6)</p>
<p>定义:将对象转换为实数后，如果对象不相等则失败。</p>
<p>irst:第一个对象</p>
<p>second:第二个对象</p>
<p>msg:校验失败打印的消息，默认为None，如果msg未给出,则错误消息为。first != second</p>
<p>values:如果values为true则打印错误消息格式为msg:first != second,如果values为false则打印错误消息格式为msg</p>
<p>precision:浮点数的四舍五入，保留小数点后面几位，默认保留小数点后面6位，忽略精度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 默认保留6位 -pass</span><br><span class="line">$&#123;a&#125;                               Set Variable         1.1</span><br><span class="line">Should Be Equal As Numbers         $&#123;a&#125;                 1.1</span><br><span class="line"></span><br><span class="line"># 保留小数点后面1位 -pass</span><br><span class="line">Should Be Equal As Numbers         1.123         1.1         precision=1</span><br><span class="line"># 保留小数点后面1位 -fail</span><br><span class="line">Should Be Equal As Numbers         1.223         1.1         precision=1</span><br><span class="line"># 打印结果: FAIL : 1.2 != 1.1</span><br><span class="line"></span><br><span class="line"># 保留整数位 -pass</span><br><span class="line">Should Be Equal As Numbers         1.223         1.4         precision=0</span><br><span class="line"># 保留整数位 -fail</span><br><span class="line">Should Be Equal As Numbers         2.223         1.4         precision=0</span><br><span class="line"># 打印结果: FAIL : 2.0 != 1.0</span><br></pre></td></tr></table></figure>

<p>说明:msg=None, values=True用法同上方法should_be_equal</p>
<p>(5).should_contain(self, container, item, msg=None, values=True,ignore_case=False)</p>
<p>定义:如果container不包含item一次或多次，则失败。适用于字符串，列表以及任何支持Python in 运算符的操作。</p>
<p>container:包含对象</p>
<p>item:被包含对象</p>
<p>msg:校验失败打印的消息，默认为None，如果msg未给出,则错误消息为。first != second</p>
<p>values:如果values为true则打印错误消息格式为msg:first != second，如果values为false则打印错误消息格式为msg</p>
<p>ignore_case:是否忽略大小写，默认不忽略</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># container包含item -pass</span><br><span class="line">$&#123;output&#125;              Set Variable         PASS12334</span><br><span class="line">Should Contain         $&#123;output&#125;            PASS</span><br><span class="line"># container不包含item -fail</span><br><span class="line">$&#123;output&#125;              Set Variable         PAS12334</span><br><span class="line">Should Contain         $&#123;output&#125;            PASS</span><br><span class="line"># 打印结果:FAIL : &apos;PAS12334&apos; does not contain &apos;PASS&apos;</span><br><span class="line"></span><br><span class="line"># 容器对象包含子对象</span><br><span class="line">$&#123;list&#125;                Create List         123         456                  789</span><br><span class="line">Should Contain         $&#123;list&#125;             456         msg=Failure!         values=False</span><br><span class="line"></span><br><span class="line"># 容器对象不包含子对象</span><br><span class="line">$&#123;list&#125;                Create List         123         456                  789</span><br><span class="line">Should Contain         $&#123;list&#125;             45          msg=Failure!         values=False</span><br><span class="line"># 打印结果: FAIL : Failure!</span><br><span class="line"></span><br><span class="line"># 容器对象包含子对象忽略大小写</span><br><span class="line">$&#123;list&#125;                Create List         ValuE         456                      789</span><br><span class="line">Should Contain         $&#123;list&#125;             value         ignore_case=True</span><br></pre></td></tr></table></figure>

<p>说明:msg=None, values=True用法同上方法should_be_equal</p>
<p>(6).should_contain_any(self, container, <em>items, *</em>configuration)</p>
<p>定义:如果container只要包含其中任何一个就成功，相当于or，只有 *items全部都不满足才失败</p>
<p>container:包含对象</p>
<p>*items:可变数量的子对象</p>
<p>**configuration:msg，values，ignore_case类型的配置</p>
<p>注意:这个方法是Robot Framework 3.0.1中的新增功能</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># *items全部不包含 -fail</span><br><span class="line">$&#123;string&#125;                  Set Variable         ValuE</span><br><span class="line">Should Contain Any         $&#123;string&#125;            x             y         z</span><br><span class="line"># 打印结果:FAIL : &apos;ValuE&apos; does not contain any of &apos;x&apos;, &apos;y&apos; or &apos;z&apos;</span><br><span class="line"></span><br><span class="line"># *items全部包含其中一个 -pass</span><br><span class="line">$&#123;string&#125;                  Set Variable         ValuE</span><br><span class="line">Should Contain Any         $&#123;string&#125;            x             y         u</span><br></pre></td></tr></table></figure>

<p>说明:msg=None, values=True用法同上方法should_be_equal</p>
<p>(7).get_length(self, item)</p>
<p>定义:返回并以整数形式记录给定item的长度,该item可以是任何具有长度的内容，例如字符串，列表或字典。关键字首先尝试使用Python函数获取长度，该函数len在’<strong>len</strong>‘内部调用该item的方法。如果失败，则关键字尝试直接调用该item的length和size方法。最后的尝试是尝试获取item的length属性的值。如果所有这些尝试均未成功，则关键字失败。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 计算字符串的长度</span><br><span class="line">$&#123;length&#125;   Get Length    Hello, world!      </span><br><span class="line">Should Be Equal As Integers   $&#123;length&#125;     13  </span><br><span class="line"></span><br><span class="line"># 计算list的长度</span><br><span class="line">@&#123;list&#125;     Create List   Hello,        world! </span><br><span class="line">$&#123;length&#125;    Get Length   $&#123;list&#125;     </span><br><span class="line">Should Be Equal As Integers   $&#123;length&#125;      2</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>robot framework教程</category>
      </categories>
      <tags>
        <tag>robot framework</tag>
      </tags>
  </entry>
</search>
